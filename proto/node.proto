syntax = "proto3";
import "block.proto";
import "blockHeader.proto";
import "tx.proto";
import "peer.proto";

message Node { 
    oneof request {
        Status status=1;

        Ping ping=2;
        PingReturn pingReturn=3;

        PutTx putTx=4;
        PutTxReturn putTxReturn=5;

        GetTxs getTxs=6;
        GetTxsReturn getTxsReturn=7;

        PutBlock putBlock=8;
        PutBlockReturn putBlockReturn=9;

        GetBlocksByHash getBlocksByHash=10;
        GetBlocksByHashReturn getBlocksByHashReturn=11;

        GetHeadersByHash getHeadersByHash=12;
        GetHeadersByHashReturn getHeadersByHashReturn=13;

        GetBlocksByRange getBlocksByRange=14;
        GetBlocksByRangeReturn getBlocksByRangeReturn=15;
        
        GetHeadersByRange getHeadersByRange=16;
        GetHeadersByRangeReturn getHeadersByRangeReturn=17;
       
        GetPeers getPeers=18;
        GetPeersReturn getPeersReturn=19;
      
     
    }
}

message Status {
    int64 version = 1;
    string networkid = 2;
    bytes hash=3;
    string ip=4;
    int32 port=5;
}

message Ping {
    int64 nonce =1;
}
message PingReturn {
    int64 nonce =1;
}

message PutTx {
    repeated Tx txs=1;
}

message PutTxReturn {
    bool success=1;
}


message GetTxs {
    int64 minFee=1;
}

message GetTxsReturn {
    bool success=1;
    repeated Tx txs=2;
}



message PutBlock {
    repeated Block blocks=1;
}

message PutBlockReturn {
    bool success=1;
}



message NewTx {
    repeated Tx txs=1;
}


message NewBlock {
    repeated Block blocks=1;
}

message GetBlocksByHash {      
    repeated bytes hashes = 1;
}

message GetBlocksByHashReturn {
    bool success =1;
    repeated Block blocks= 2;
}



message GetHeadersByHash {    
    repeated bytes hashes = 1;
}

message GetHeadersByHashReturn {
    bool success =1;
    repeated BlockHeader headers = 2;
}

        
message GetBlocksByRange {
    int64 fromHeight= 1;
    int64 count=2;
}

message GetBlocksByRangeReturn {
    bool success =1;
    repeated Block blocks= 2;
}


message GetHeadersByRange {    
    int64 fromHeight= 1;
    int64 count=2;
}

message GetHeadersByRangeReturn {
    bool success =1;
    repeated BlockHeader headers = 2;
}


message GetPeers {        
    int32 count=2;
}

message GetPeersReturn {  
    bool success =1;  
    repeated Peer peers = 2;
}